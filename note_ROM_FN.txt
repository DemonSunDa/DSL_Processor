F7  // goto     // initiation sequence
E0              // L225
FF              // Timer_ISR starts here
F0  // lw A
6F              // work_save
F1  // lw B
7C              // SWL_hold
F4  // A = A | B
F2  // sw A
7E              // LEDL_hold
F2  // sw A
90              // IR addr /////////////////////////////
F7  // goto
30              // L049 set grid
F0  // lw A     // goto here L015
7A              // MouseX_hold
F1  // lw B
79              // MouseY_flip
F2  // sw A
4D              // VGA_X_hold
F2  // sw A
B0              // VGA_X
F3  // sw B
4E              // VGA_Y_hold
F3  // sw B
B1              // VGA_Y
F0  // lw A
01              // CONSTANT 1
F2  // sw A
B2              // Pixel_data set new point
F7  // goto
73              // L116 end of Timer_ISR
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
FF
F0  // lw A     // goto here L049 set grid
00              // CONSTANT 0
F2  // sw A
4B              // VGA_ctrX ctrX = 0
F2  // sw A
4C              // VGA_ctrY ctrY = 0
F0  // lw A     // goto here L055 Y_loop
4C              // VGA_ctrY
F1  // lw B
77              // YHL
A6  // bgt      // if (ctrY > YHL)
70              // branch to L113 end_loop
54  // inc A    // ctrY ++
F2  // sw A
4C              // VGA_ctrY ////////////////////////////
F0  // lw A     // goto here L064 X_loop
4B              // VGA_ctrX
F1  // lw B
73              // XHL
A6  // bgt      // if (ctrX > XHL)
6E              // branch to L111
54  // inc A    // ctrX ++
F2  // sw A
4B              // VGA_ctrX ////////////////////////////
F0  // lw A
4B              // VGA_ctrX
F1  // lw B
4C              // VGA_ctrY
F2  // sw A
B0              // VGA_X
F3  // sw B
B1              // VGA_Y
F1  // lw B
71              // XLB
96  // beq      // if (ctrX == XLB)
68              // branch to L105
F1  // lw B
72              // XHB
96  // beq      // if (ctrX == XHB)
68              // branch to L105
F0  // lw A
4C              // VGA_ctrY
F1  // lw B
75              // YLB
96  // beq      // if (ctrY == YLB)
68              // branch to L105
F1  // lw B
76              // YHB
96  // beq      // if (ctrY == YHB)
68              // branch to L105
F0  // lw A
00              // CONSTANT 0
F2  // sw A
B2              // Pixel_data clear this pixel
F7  // goto
3F              // L064 X_loop
F0  // lw A     // branch to here L105
01              // CONSTANT 1
F2  // sw A
B2              // Pixel_data set this pixel
F7  // goto
3F              // L064 X_loop
F7  // goto     // goto here L111
36              // L055 Y_loop
F7  // goto     // branch to here L113 end_loop
0E              // L015
FF
F0  // lw A     // goto here L116 when ending Timer_ISR
5F              // timer_counter
F1  // lw B
0A              // CONSTANT 10
54  // inc A    // timer_counter ++
B6  // blt      // if (timer_counter < 10)
7C              // branch to L125
F0  // lw A
00              // CONSTANT 0
F2  // sw A     // branch to here L125
5F              // timer_counter
F7  // goto
EE              // L239 set LED ////////////////////////
F0  // lw A     // Mouse_ISR starts here
73              // XHL h9F
F1  // lw B
A1              // MouseX
F3  // sw B
7A              // MouseX_hold
15  // B = A - B
F3  // sw B
78              // MouseX_flip
F0  // lw A
77              // YHL h77
F1  // lw B
A2              // MouseY
F3  // sw B
7B              // MouseY_hold
15  // B = A - B
F3  // sw B
79              // MouseY_flip /////////////////////////
F0  // lw A
7D              // SWH_hold
F1  // lw B
18              // CONSTANT b10000000
96  // beq
9E              // branch to L159
F0  // lw A
7A              // MouseX_hold
F1  // lw B
79              // MouseY_flip
F7  // goto
A2              // L163
F0  // lw A     // branch to here L159
A0              // MouseStatus
F1  // lw B
A3              // MouseZ
F2  // sw A     // goto here L163
D0              // left byte
F3  // sw B
D1              // right byte //////////////////////////
F0  // lw A
00              // CONSTANT 0
F2  // sw A
6F              // work_save
F0  // lw A
7A              // MouseX_hold
F1  // lw B
71              // XLB
B6  // blt      // if (X < XLB)
BC              // branch to L189
F1  // lw B
72              // XHB
B6  // blt      // else if (X < XHB)
B8              // branch to L185
F0  // lw A     // else
62              // CMXR
F7  // goto
BE              // L191
F0  // lw A     // branch to here L185
61              // CMXM
F7  // goto
BE              // L191
F0  // lw A     // branch to here L189
60              // CMXL
F1  // lw B     // goto here L191
6F              // work_save
F5  // B = A | B
F3  // sw B
6F              // work_save ///////////////////////////
F0  // lw A
7B              // MouseY_hold
F1  // lw B
75              // YLB
B6  // blt      // if (Y < YLB)
D5              // branch to L214
F1  // lw B
76              // YHB
B6  // blt      // else if (Y < YHB)
D1              // branch to L210
F0  // lw A     // else
65              // CMYF
F7  // goto
D7              // L216
F0  // lw A     // branch to here L210
64              // CMYM
F7  // goto
D7              // L216
F0  // lw A     // branch to here L214
63              // CMYB
F1  // lw B     // goto here L216
6F              // work_save
F5  // B = A | B
F3  // sw B
6F              // work_save
F8  // goto IDLE
FF  // nop      ////////////////////////////////////////
FF
FF
F0  // lw A     // goto here L225 initiation sequence
40              // MCoordX
F1  // lw B
41              // MCoordY
F2  // sw A
78              // MouseX_flip
F3  // sw B
79              // MouseY_flip
F2  // sw A
7A              // MouseX_hold
F3  // sw B
7B              // MouseY_hold
F7  // goto
30              // L049 set grid ///////////////////////
F2  // sw A     // goto here L239 set LED
C1              // LEDH
F1  // lw B
E1              // SWH
F3  // sw B
7D              // SWH_hold
F1  // lw B
E0              // SWL
F3  // sw B
7C              // SWL_hold
F1  // lw B
7E              // LEDL_hold
F3  // sw B
C0              // LEDL
F8  // goto IDLE
FF  // nop
02  // Timer_ISR L003
80  // Mouse_ISR L129
